#include <cpu.hpp>

static std::string	append_code(unsigned char *buffer, size_t len);
static std::string	append_offset(size_t len);

static size_t		reserved_bytes(size_t offset, size_t nbytes)
{
	static	size_t	offsets[13][2] = {
		{0x102, 2},
		{0x134, 11},
		{0x13f, 4},
		{0x143, 1},
		{0x144, 2},
		{0x146, 1},
		{0x147, 1},
		{0x148, 1},
		{0x149, 1},
		{0x14A, 1},
		{0x14C, 1},
		{0x14D, 2},
		{0, 0}
	} ;

	size_t			index = 0;

	while (offsets[index][0])
	{
		if ((offset <= offsets[index][0] && offsets[index][0] <= offset + nbytes))
			return (offsets[index][0] - offset);
		index++;
	}
	return (nbytes);
}

static std::string	format_str(const char *directive, const char *buf, unsigned char *buffer, size_t len)
{
	std::string		s = directive;

	s += buf;
	s += append_code(buffer, len);
	printf("FORMAT @%zu %s\n", len, s.c_str());
	return (s);
}

static std::string	format_disas_header(unsigned char *buffer, size_t *len)
{
	char			buf[16] = {0};
	//unsigned long	v = 0;

	if (*len == 0x102)
	{
		sprintf(buf, "0x%02x%02x", *buffer, *(buffer + 1));
		*len += 2;
		return (format_str(".org ", buf, buffer, 2));
	}
	else if (*len == 0x134)
	{
		printf("TITLEEEEEEEEEEEEE\n");
		strncpy((char*)buf, (char*)buffer, 11);
		*len += 11;
		return (format_str(".title ", buf, buffer, 11));
	}
	else if (*len == 0x13f)
	{
		memcpy(buf, buffer, 4);
		*len += 4;
		return (format_str(".code ", buf, buffer, 4));
	}
	else if (*len == 0x144)
	{
		memcpy(buf, buffer, 2);
		*len += 2;
		return (format_str(".maker ", buf, buffer, 2));		
	}
	else if (*len == 0x146)
	{
		sprintf(buf, "0x%02x", *buffer);
		*len += 1;
		return (format_str(".sgb ", buf, buffer, 1));
	}
	else if (*len == 0x143)
	{
		sprintf(buf, "0x%02x", *buffer);
		*len += 1;
		return (format_str(".cgb ", buf, buffer, 1));
	}
	else if (*len == 0x147)
	{
		sprintf(buf, "0x%02x", *buffer);
		*len += 1;
		return (format_str(".cartbrige ", buf, buffer, 1));
	}
	else if (*len == 0x148)
	{
		sprintf(buf, "0x%02x", *buffer);
		*len += 1;
		return (format_str(".rom ", buf, buffer, 1));
	}
	else if (*len == 0x149)
	{
		sprintf(buf, "0x%02x", *buffer);
		*len += 1;
		return (format_str(".ram ", buf, buffer, 1));
	}
	else if (*len == 0x14A)
	{
		sprintf(buf, "0x%02x", *buffer);
		*len += 1;
		return (format_str(".dest ", buf, buffer, 1));
	}
	else if (*len == 0x14C)
	{
		sprintf(buf, "0x%02x", *buffer);
		*len += 1;
		return (format_str(".version ", buf, buffer, 1));
	}
	else if (*len == 0x14D)
	{
		sprintf(buf, "0x%02x", *buffer);
		*len += 1;
		return (format_str(".compl ", buf, buffer, 1));
	}
	else if (*len == 0x14E)
	{
		sprintf(buf, "0x%02x%02x", *buffer, *(buffer + 1));
		*len += 1;
		return (format_str(".check ", buf, buffer, 2));
	}

	return ("");
}

static std::string	format_data_disas_4(unsigned char *buffer, size_t *len)
{
	std::string		s = "";
	char			buf[16] = {0};
	unsigned int	value = 0;
	unsigned int	tmp = 0;
	unsigned int	i = 0;

	(*len)++;

	tmp = (buffer[2]);
	(*len)++;
	sprintf(buf, " 0x%hhx", tmp);
	s += buf;

	tmp = (buffer[1]);
	(*len)++;
	sprintf(buf, "%hhx", tmp);
	s += buf;

	tmp = (buffer[3]);
	(*len)++;
	sprintf(buf, " %hhx", tmp);
	s += buf;

	value = (buffer[4]);
	(*len)++;
	sprintf(buf, " %hhx", value);
	s += buf;

	if (value > 0xB)
		value = 0xB;

	s += "\n{ ";
	while (i < value)
	{
		tmp = buffer[*len];
		(*len)++;
		if (i > 0)
			sprintf(buf, ", %hhx", tmp);
		else
			sprintf(buf, "%hhx", tmp);
		s += buf;

		i++;
	}
	s += " }";
	return (s);
}

//ATTRIBUTE_CHR
static std::string	format_data_disas_3(unsigned char *buffer, size_t *len)
{
	std::string		s = "";
	char			buf[16] = {0};
	unsigned int	value1 = 0;
	unsigned int	value2 = 0;
	unsigned int	tmp = 0;
	unsigned int	i = 0;
	unsigned int	j = 0;

	value1 = (buffer[0] & 0x7);
	(*len)++;
	sprintf(buf, "%hhx", value1);
	s += buf;

	tmp = (buffer[1] & 0x1f);
	(*len)++;
	sprintf(buf, " %hhx", tmp);
	s += buf;

	tmp = (buffer[2] & 0x1f);
	(*len)++;
	sprintf(buf, " %hhx", tmp);
	s += buf;

	tmp = (buffer[3] & 0xff);
	(*len)++;
	sprintf(buf, " %hhx", tmp);
	s += buf;

	value2 = (buffer[4] & 0xff);
	(*len)++;
	sprintf(buf, " %hhx", value2);
	s += buf;

	tmp = (buffer[5] & 0x01);
	(*len)++;
	sprintf(buf, " %hhx", tmp);
	s += buf;

	tmp = (buffer[4] & 0x01);
	(*len)++;
	sprintf(buf, " %hhx", tmp);
	s += buf;

	while (i < value1)
	{
		j = 0;

		s += "\n{ ";

		while (j < value2)
		{
			s += "[ ";

			tmp = ((buffer[*len] >> 6) & 0x3);
			sprintf(buf, "%hhx", tmp);
			s += buf;

			if (j + 1 >= value2)
				break;

			tmp = (buffer[*len] >> 4) & 0x3;
			sprintf(buf, ", %hhx", tmp);
			s += buf;

			if (j + 2 >= value2)
				break;

			tmp = (buffer[*len] >> 2) & 0x3;
			sprintf(buf, ", %hhx", tmp);
			s += buf;

			if (j + 3 >= value2)
				break;

			tmp = (buffer[*len]) & 0x3;
			sprintf(buf, ", %hhx", tmp);
			s += buf;

			(*len)++;
			s += " ]";

			j += 4;
		}

		s += " }";

		i++;
	}
	return (s);
}

//ATTR_LIN
static std::string	format_data_disas_2(unsigned char *buffer, size_t *len)
{
	std::string		s = "";
	char			buf[16] = {0};
	unsigned int	value1 = 0;
	unsigned int	value2 = 0;
	unsigned int	tmp = 0;
	unsigned int	i = 0;
	unsigned int	j = 0;

	value1 = (buffer[0] & 0x7);
	(*len)++;
	sprintf(buf, "%hhx", value1);
	s += buf;

	value2 = (buffer[1] & 0xff);
	(*len)++;
	sprintf(buf, " %hhx", value2);
	s += buf;

	if (value2 > 0x6E)
		value2 = 0x6E;

	while (i < value1)
	{
		j = 0;

		s += "\n{ ";

		while (j < value2)
		{
			s += "[ ";

			tmp = (buffer[*len] & 0x1f);
			sprintf(buf, "%hhx", tmp);
			s += buf;

			tmp = (buffer[*len] >> 5) & 0x3;
			sprintf(buf, ", %hhx", tmp);
			s += buf;

			tmp = (buffer[*len] >> 7) & 0x1;
			sprintf(buf, ", %hhx", tmp);
			s += buf;

			(*len)++;
			s += " ]";

			j++;
		}

		s += " }";

		i++;
	}
	return (s);
}

//ATTR_BLK
static std::string	format_data_disas_1(unsigned char *buffer, size_t *len)
{
	std::string		s = "";
	char			buf[16] = {0};
	unsigned int	value1 = 0;
	unsigned int	value2 = 0;
	unsigned int	tmp = 0;
	unsigned int	i = 0;
	unsigned int	j = 0;

	value1 = (buffer[0] & 0x7);
	(*len)++;
	sprintf(buf, "%hhx", value1);
	s += buf;

	value2 = (buffer[1] & 0x1f);
	(*len)++;
	sprintf(buf, " %hhx", value2);
	s += buf;

	if (value2 > 0x12)
		value2 = 0x12;

	while (i < value1)
	{
		j = 0;

		s += "\n{ ";

		while (j < value2)
		{
			s += "[ ";

			tmp = (buffer[*len] & 0x7);
			(*len)++;
			sprintf(buf, "%hhx", tmp);
			s += buf;

			tmp = (buffer[*len] & 0x1f);
			(*len)++;
			sprintf(buf, ", %hhx", tmp);
			s += buf;

			tmp = (buffer[*len] & 0x1f);
			(*len)++;
			sprintf(buf, ", %hhx", tmp);
			s += buf;

			tmp = (buffer[*len] & 0x1f);
			(*len)++;
			sprintf(buf, ", %hhx", tmp);
			s += buf;

			tmp = (buffer[*len] & 0x1f);
			(*len)++;
			sprintf(buf, ", %hhx", tmp);
			s += buf;

			s += " ]";

			j++;
		}

		s += " }";

		i++;
	}
	return (s);
}

static std::string	format_disas2(unsigned char *buffer, t_expr *e, size_t *len)
{
	unsigned short	value = 0;
	int				i = (e->high_bit / 8);
	char			buf[16] = {0};

	value = buffer[i];
	if (*len < (size_t)i)
		*len = (size_t)i;

	value = (value >> ((e->high_bit % 8) - (e->nbit - 1))) & ((1 << e->nbit) - 1);
	value *= e->offset;

	//printf("buffer = %hx, high_bit = %d, nbit = %d, offset = %d\n", buffer[i], e->high_bit,e->nbit, e->offset);
	//printf("value = %hx\n", value);

	if (e->type == 0)
	{
		if (e->issigned == 1)
		{
			short s = value;
			sprintf(buf, "-%02hx", s);
		}
		else
			sprintf(buf, "%02hx", value);
		return (std::string(buf));
	}
	else if (e->type == 1)
	{
		if (e->fct == 1)
			return (format_data_disas_1(buffer, len));
		else if (e->fct == 2)
			return (format_data_disas_2(buffer, len));
		else if (e->fct == 3)
			return (format_data_disas_3(buffer, len));
		else if (e->fct == 4)
			return (format_data_disas_4(buffer, len));
	}
	else if (e->type == 3)
		return (e->strings[value]);

	return ("><");
}

static std::string	append_offset(size_t len)
{
	char		code[16] = {0};

	sprintf(code, " @0x%04lx", len);
	return (std::string(code));
}

static std::string	append_code(unsigned char *buffer, size_t len)
{
	std::string	s = "\t;";
	size_t		i = 0;
	char		code[4] = {0};

	while (i <= len)
	{
		sprintf(code, " %02hx", buffer[i]);
		s += code;
		i++;
	}

	return (s);
}

static std::string	format_disas(char *expr, unsigned char *buffer, size_t *len)
{
	std::string		s = "";
	bool			is_format = false;
	t_expr			ex;

	bzero(&ex, sizeof(ex));

	//std::cout << "EXPR = " << expr << std::endl;

	*len = 0;
	while (*expr)
	{
		if (*expr == '%')
		{
			is_format = true;
			expr++;
		}
		else if (!is_format)
		{
			while (*expr && *expr != '%')
			{
				s += (*expr);
				expr++;
			}
		}
		else
		{
			if (*expr == 'V')
			{
				ex.issigned = 0;
				ex.type = 0;
				ex.nbit = 8;
				ex.offset = 1;
				expr++;
			}
			else if (*expr == 'v')
			{
				ex.issigned = 0;
				ex.type = 0;
				ex.nbit = 3;
				ex.offset = 1;
				expr++;
			}
			else if (*expr == 's')
			{
				ex.issigned = 1;
				ex.type = 0;
				expr++;
				ex.nbit = atoi(expr);
				ex.offset = 1;
				while (isdigit(*expr))
					expr++;
			}
			else if (*expr == 'h')
			{
				ex.issigned = 0;
				ex.type = 0;
				expr++;
				ex.nbit = atoi(expr);
				ex.offset = 1;
				while (isdigit(*expr))
					expr++;
			}
			else if (*expr == 'f')
			{
				ex.issigned = 0;
				ex.type = 1;
				ex.nbit = 0;
				expr++;
				ex.fct = atoi(expr);
				while (isdigit(*expr))
					expr++;
			}
			else if (*expr == 'o' || *expr == 't')
			{
				ex.issigned = 0;
				ex.type = 0;
				ex.nbit = 3;
				ex.offset = 8;
				expr++;
			}
			else if (*expr == 'c')
			{
				ex.type = 3;
				ex.nbit = 2;
				ex.offset = 1;
				ex.strings = Cpu::conditions_names();
				expr++;
			}
			else if (*expr == 'r')
			{
				ex.type = 3;
				ex.nbit = 3;
				ex.offset = 1;
				ex.strings = Cpu::registers_iii_names();
				expr++;
			}
			else if (*expr == 'R' && *(expr + 1) == '1')
			{
				ex.type = 3;
				ex.nbit = 2;
				ex.offset = 1;
				ex.strings = Cpu::registers_i_names();
				expr += 2;
			}
			else if (*expr == 'R' && *(expr + 1) == '2')
			{
				ex.type = 3;
				ex.nbit = 2;
				ex.offset = 1;
				ex.strings = Cpu::registers_ii_names();
				expr += 2;
			}
			else
			{
				ex.offset = 1;
				ex.nbit = 0;
				ex.type = -1;
			}

			if (*expr == '.')
			{
				expr++;
				ex.high_bit = atoi(expr);

				while (isdigit(*expr))
					expr++;
			}
			else
				ex.high_bit = 0;

			s += format_disas2(buffer, &ex, len);
			is_format = false;
		}
	}

	return (s);
}

static std::string	sub_disas(call_t *calls, char **names, unsigned char **buffer, size_t *length)
{
	std::string		s = "";
	size_t			offset = 0;
	unsigned short	opcode = 0;
	unsigned int	nbytes = 2;
	int				i = 0;

	while (nbytes != 0)
	{
		i = 0;
		opcode = 0;
		offset = reserved_bytes(*length, nbytes);
		if (*length >= 0x130 && *length <= 0x139)
			printf("%lx - %zu\n", *length, offset);
		memcpy(&opcode, *buffer, offset);

		while (calls[i][0])
		{
			if (calls[i][1] == offset && Cpu::codecpu_parser(calls[i], opcode))
			{
				size_t		len = 0;

				//std::cout << std::to_string(len) << " RET = " << s << std::endl;
				s = format_disas(names[i], *buffer, &len);
				s += append_code(*buffer, len);

				if (len != 0)
				{
					*length += (len + 1);
					(*buffer) += (len + 1);
				}
				else
				{
					*length += offset;
					(*buffer) += offset;
				}

				return (s);
			}

			i++;
		}
		nbytes--;
	}

	return (s);
}

static unsigned char	*get_line_dump(call_t *calls, unsigned char *buffer, size_t *len)
{
	unsigned short	opcode = 0;
	unsigned int	nbytes = 2;
	size_t			offset = 0;
	int				i = 0;
	std::string		s = "";
	size_t			before = *len;

	s = format_disas_header(buffer, len);
	if (s != "")
	{
		unsigned char	*ret = (unsigned char*)malloc(sizeof(unsigned char) * (*len - before + 1));
		ret[0] = (*len - before);
		memcpy(ret + 1, buffer, sizeof(unsigned char) * (*len - before));
		return (ret);
	}

	while (nbytes != 0)
	{
		offset = reserved_bytes(*len, nbytes);
		opcode = 0;
		memcpy(&opcode, buffer, offset);

		i = 0;
		while (calls[i][0])
		{
			if (calls[i][1] == offset && Cpu::codecpu_parser(calls[i], opcode))
			{
				unsigned char	*ret = (unsigned char*)malloc(sizeof(unsigned char) * (offset + 1));
				ret[0] = offset;
				memcpy(ret + 1, buffer, sizeof(unsigned char) * offset);
				*len += offset;
				return (ret);
			}

			i++;
		}
		nbytes--;
	}

	unsigned char	*ret = (unsigned char*)malloc(sizeof(unsigned char) * 2);
	ret[0] = 1;
	ret[1] = *buffer;
	(*len)++;
	return (ret);
}

static void		mywrite(const int fd, const char *buf, size_t len)
{
	if (!write(fd, buf, len))
	{
		;
	}
}

std::vector<unsigned char*>			dump_by_line(unsigned char *buffer)
{
	std::vector<unsigned char*>	ret = std::vector<unsigned char*>();
	call_t						*calls = Cpu::get_calls();
	unsigned char				*line = NULL;
	size_t						l = 0;

	while (true)
	{
		if (l >= 16384)
			break ;

		line = get_line_dump(calls, buffer + l, &l);
		ret.push_back(line);
	}

	return (ret);
}

void			disassembly(const char *filename, unsigned char *buffer)
{
	int				fd = open(filename, O_RDWR | O_CREAT | O_TRUNC, 0644);
	call_t			*calls = Cpu::get_calls();
	char			**names = Cpu::get_calls_expr();
	//unsigned char	*start = buffer;
	size_t	l = 	0;
	bool			db = false;

	if (fd > 0)
	{
		while (true)
		{
			if (l >= 16384)
				break ;

			if (l == 0x134)
				printf("!!!!!!!!!!!\n");

			size_t	keep = l;
			std::string	s = format_disas_header(buffer, &keep);
			if (keep > l || s != "")
			{
				printf("HEADER (%zu > %zu) %s\n", keep, l, s.c_str());
				if (db == true)
				{
					db = false;
					mywrite(fd, "\n", 1);
				}

				s += append_offset(l);
				s += "\n";

				mywrite(fd, s.c_str(), s.length());
				buffer += (keep - l);
				l = keep;
			}
			else
			{
				keep = l;
				s = sub_disas(calls, names, &buffer, &l);

				if (s == "")
				{
					if (!db)
					{
						db = true;
						mywrite(fd, ".db", 3);
					}

					char	tmp[4] = {0};
					sprintf(tmp, " %02x", *buffer);
					s = std::string(tmp);

					buffer++;
					l++;
					mywrite(fd, s.c_str(), s.length());
				}
				else
				{
					if (db == true)
					{
						db = false;
						mywrite(fd, "\n", 1);
					}

					s += append_offset(keep);
					mywrite(fd, s.c_str(), s.length());
					mywrite(fd, "\n", 1);
				}
			}
		}

		close(fd);
	}
}
